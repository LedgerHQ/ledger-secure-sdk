#*******************************************************************************
#   Ledger SDK
#   (c) 2017 Ledger
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#*******************************************************************************

# TARGET should be set as an environment variable otherwise it will be read from a `.target`
# file in the SDK root repository
TARGETS := nanos nanox nanos2 stax
ifeq ($(TARGET),)
ifeq ("$(wildcard $(BOLOS_SDK)/.target)","")
$(error No TARGET specified and no .target file in SDK repository $(BOLOS_SDK))
else
TARGET := $(shell cat $(BOLOS_SDK)/.target)
endif
endif

ifeq ($(filter $(TARGET),$(TARGETS)),)
$(error TARGET not set to a valid value (possible values: $(TARGETS)))
endif

API_LEVEL   := 12
TARGET_PATH := $(BOLOS_SDK)/target/$(TARGET)
TARGET_ID   := $(shell cat $(TARGET_PATH)/include/bolos_target.h | grep TARGET_ID | cut -f3 -d' ')
TARGET_NAME := $(shell cat $(TARGET_PATH)/include/bolos_target.h | grep TARGET_ | grep -v TARGET_ID | cut -f2 -d' ')
SDK_NAME    := "ledger-secure-sdk"
SDK_VERSION := $(shell git -C $(BOLOS_SDK) describe --tags --exact-match  --match "v[0-9]*" --dirty)
SDK_HASH    := $(shell git -C $(BOLOS_SDK) describe --always --dirty --exclude '*' --abbrev=40)
ifeq ($(SDK_VERSION),)
SDK_VERSION := "None"
endif
ifeq ($(SDK_HASH),)
SDK_HASH := "None"
endif
# Expose API_LEVEL, SDK_VERSION and SDK_HASH to the app.
DEFINES += API_LEVEL=$(API_LEVEL)
DEFINES += SDK_VERSION=\"$(SDK_VERSION)\"
DEFINES += SDK_HASH=\"$(SDK_HASH)\"

# extra load parameters for loadApp script
ifneq ($(SCP_PRIVKEY),)
PARAM_SCP+=--rootPrivateKey $(SCP_PRIVKEY)
endif

# Command to print ICONNAME hexadecimal bitmap on stdout
# according to the hardware target.
ifeq ($(TARGET_NAME),TARGET_STAX)
ICONHEX_CMD=python3 $(BOLOS_SDK)/lib_nbgl/tools/icon2glyph.py --hexbitmaponly $(ICONNAME)
else
ICONHEX_CMD=python3 $(BOLOS_SDK)/icon3.py --hexbitmaponly $(ICONNAME)
endif

COMMON_LOAD_PARAMS=--tlv --targetId $(TARGET_ID) --targetVersion="$(TARGET_VERSION)" --apiLevel $(API_LEVEL) --delete --fileName bin/app.hex --appName $(APPNAME) --appVersion $(APPVERSION) --dataSize $$((0x`cat debug/app.map |grep _envram_data | tr -s ' ' | cut -f2 -d' '|cut -f2 -d'x'` - 0x`cat debug/app.map |grep _nvram_data | tr -s ' ' | cut -f2 -d' '|cut -f2 -d'x'`)) `ICONHEX=\`$(ICONHEX_CMD)  2>/dev/null\` ; [ ! -z "$$ICONHEX" ] && echo "--icon $$ICONHEX"` $(PARAM_SCP)
COMMON_DELETE_PARAMS=--targetId $(TARGET_ID) --appName $(APPNAME) $(PARAM_SCP)

BUILD_DIR := build
TARGET_BUILD_DIR := $(BUILD_DIR)/$(TARGET)
BIN_DIR := $(TARGET_BUILD_DIR)/bin
OBJ_DIR := $(TARGET_BUILD_DIR)/obj
DBG_DIR := $(TARGET_BUILD_DIR)/dbg
DEP_DIR := $(TARGET_BUILD_DIR)/dep
GEN_SRC_DIR := $(TARGET_BUILD_DIR)/gen_src

### platform definitions
DEFINES += gcc __IO=volatile

# no assert by default
DEFINES += NDEBUG

# Debug mode disabled by default
DEBUG:=0

# default is not to display make commands
log = $(if $(strip $(VERBOSE)),$1,@$1) # kept for retrocompat
L = $(if $(strip $(VERBOSE)),,@)

ifeq ($(CC),)
CC        = clang
endif

SYSROOT = $(shell $(GCCPATH)arm-none-eabi-gcc -print-sysroot)
ifeq ($(SYSROOT),)
CFLAGS   += -I/usr/include
else
CFLAGS   += --sysroot="$(SYSROOT)"
endif

# optimization and debug levels
ifneq ($(DEBUG),0)
OPTI_LVL  = -Og
OPTI_ALVL = $(OPTI_LVL)
DBG_LVL   = -g3
else
OPTI_LVL  = -Oz
OPTI_ALVL = -Os # assembler does not handle -Oz, use -Os instead
DBG_LVL   = -g0
endif

CFLAGS   += $(OPTI_LVL) $(DBG_LVL)
CFLAGS   += -fomit-frame-pointer -momit-leaf-frame-pointer

CFLAGS   += -fno-common -mlittle-endian
CFLAGS   += -std=gnu99

CFLAGS   += -Wall -Wextra
CFLAGS   += -Wno-main
CFLAGS   += -Werror=int-to-pointer-cast

# Additional Clang warnings
CFLAGS   += -Wno-error=int-conversion -Wimplicit-fallthrough
CFLAGS   += -Wvla -Wundef -Wshadow -Wformat=2 -Wformat-security -Wwrite-strings

ENABLE_SDK_WERROR ?= 0
ifneq ($(ENABLE_SDK_WERROR),0)
    CFLAGS   += -Werror
endif

CFLAGS   += -fdata-sections -ffunction-sections -funsigned-char -fshort-enums
CFLAGS   += -mno-unaligned-access
CFLAGS   += -fropi
CFLAGS   += -fno-jump-tables # avoid jump tables for switch to avoid problems with invalid PIC access
CFLAGS   += -nostdlib -nodefaultlibs

AFLAGS   += $(OPTI_ALVL) $(DBG_LVL) -fno-common

LDFLAGS  += $(OPTI_LVL) $(DBG_LVL)
LDFLAGS  += -fomit-frame-pointer
LDFLAGS  += -Wall
LDFLAGS  += -fno-common -ffunction-sections -fdata-sections -fwhole-program
LDFLAGS  += -mno-unaligned-access
LDFLAGS  += -Wl,--gc-sections -Wl,-Map,$(DBG_DIR)/app.map

ifeq ($(TARGET_NAME),$(filter $(TARGET_NAME),TARGET_NANOS))
CFLAGS   += --target=armv6m-none-eabi -mthumb
CFLAGS   += -mcpu=cortex-m0plus -mthumb  -mtune=cortex-m0plus
AFLAGS   += -mcpu=cortex-m0plus -mtune=cortex-m0plus -mthumb
LDFLAGS  += -mcpu=cortex-m0plus -mthumb
LDFLAGS  += -nostartfiles --specs=nano.specs
endif

ifeq ($(TARGET_NAME),TARGET_NANOX)
CFLAGS   += -frwpi
LDFLAGS  += -momit-leaf-frame-pointer
CFLAGS   += --target=armv6m-none-eabi -mthumb
LDFLAGS  += --target=armv6m-none-eabi -mthumb
LDFLAGS  += -mtune=cortex-m0plus -mlittle-endian  -mcpu=cortex-m0plus
LDFLAGS  += -nostdlib -nodefaultlibs #-nostartfiles
LDFLAGS  += -mno-movt
LDFLAGS  += -L$(BOLOS_SDK)/arch/st33/lib/
AFLAGS   += -mcpu=cortex-m0plus -mtune=cortex-m0plus -mthumb
endif

ifeq ($(TARGET_NAME),$(filter $(TARGET_NAME),TARGET_STAX TARGET_NANOS2))
CFLAGS   += -mno-movt -frwpi --target=armv8m-none-eabi -mcpu=cortex-m35p+nodsp -mthumb -msoft-float -mtune=cortex-m35p+nodsp
LDFLAGS  += -momit-leaf-frame-pointer
LDFLAGS  += --target=armv8m-none-eabi
LDFLAGS  += -mcpu=cortex-m35p+nodsp -mlittle-endian
LDFLAGS  += -nostdlib -nodefaultlibs #-nostartfiles
LDFLAGS  += -mno-movt
LDFLAGS  += -L$(BOLOS_SDK)/arch/st33k1/lib/
AFLAGS   += -mcpu=cortex-m35p+nodsp -mthumb
endif

ifeq ($(TARGET_NAME),TARGET_NANOS)
DEFINES += HAVE_BAGL
DEFINES += BAGL_WIDTH=128 BAGL_HEIGHT=32

LDFLAGS  += -L$(BOLOS_SDK)/lib/
endif

ifeq ($(TARGET_NAME),$(filter $(TARGET_NAME),TARGET_NANOX TARGET_NANOS2))
DEFINES += HAVE_BAGL HAVE_UX_FLOW
DEFINES += BAGL_WIDTH=128 BAGL_HEIGHT=64
DEFINES += HAVE_BAGL_ELLIPSIS
DEFINES += HAVE_BAGL_FONT_OPEN_SANS_REGULAR_11PX
DEFINES += HAVE_BAGL_FONT_OPEN_SANS_EXTRABOLD_11PX
DEFINES += HAVE_BAGL_FONT_OPEN_SANS_LIGHT_16PX

LDFLAGS  += -L$(BOLOS_SDK)/lib/
endif

ifeq ($(TARGET_NAME),TARGET_STAX)
DEFINES += HAVE_BAGL_FONT_INTER_REGULAR_24PX
DEFINES += HAVE_BAGL_FONT_INTER_SEMIBOLD_24PX
DEFINES += HAVE_BAGL_FONT_INTER_MEDIUM_32PX
DEFINES += HAVE_BAGL_FONT_HMALPHAMONO_MEDIUM_32PX
DEFINES += HAVE_NBGL
DEFINES += HAVE_PIEZO_SOUND
DEFINES += HAVE_SE_TOUCH
DEFINES += NBGL_PAGE
DEFINES += NBGL_USE_CASE
#DEFINES += HAVE_DISPLAY_FAST_MODE
endif

ifeq ($(TARGET_NAME),$(filter $(TARGET_NAME),TARGET_NANOX TARGET_NANOS2))
# Screen is directly connected to the SE
DEFINES       += HAVE_SE_SCREEN
# Button is directly connected to the SE
DEFINES       += HAVE_SE_BUTTON
# MCU serial is stored on board of the SE
DEFINES       += HAVE_MCU_SERIAL_STORAGE
DEFINES       += HAVE_FONTS
# already defined within apps
# DEFINES       += HAVE_BLE
DEFINES       += HAVE_BATTERY
endif

# include builtin CX libs options
-include $(BOLOS_SDK)/Makefile.conf.cx

# define the default makefile target (high in include to avoid glyph.h or what not specific target to be the default one when no target passed on the make command line)
all: default
