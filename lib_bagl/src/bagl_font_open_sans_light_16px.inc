const unsigned char bitmapOPEN_SANS_LIGHT_16PX[] = {
//ascii 0x0020
//ascii 0x0021
  0xFF, 0x0C,
//ascii 0x0022
  0x99, 0x99,
//ascii 0x0023
  0x90, 0x40, 0x82, 0x08, 0x22, 0xFE, 0x23, 0x81,
  0xC4, 0x7F, 0x44, 0x10, 0x41, 0x02, 0x09,
//ascii 0x0024
  0x08, 0x9E, 0x22, 0x91, 0x50, 0x70, 0x70, 0x48,
  0x64, 0xCA, 0x83,
//ascii 0x0025
  0x06, 0x49, 0x44, 0x22, 0x92, 0x90, 0x84, 0x94,
  0x99, 0x12, 0x92, 0x90, 0x44, 0x24, 0x22, 0x09,
  0x06,
//ascii 0x0026
  0x1C, 0x44, 0x88, 0x10, 0x41, 0x81, 0x81, 0xC4,
  0x90, 0x41, 0x03, 0x0D, 0xF3, 0x09,
//ascii 0x0027
  0x0F,
//ascii 0x0028
  0x5A, 0x55, 0x55, 0x29,
//ascii 0x0029
  0xA5, 0xAA, 0xAA, 0x16,
//ascii 0x002A
  0x08, 0x04, 0xE2, 0x4F, 0xA1, 0x88,
//ascii 0x002B
  0x08, 0x04, 0xE2, 0x8F, 0x40, 0x20,
//ascii 0x002C
  0x6A,
//ascii 0x002D
  0x07,
//ascii 0x002E
  0x0F,
//ascii 0x002F
  0x10, 0x21, 0x44, 0x08, 0x21, 0x42, 0x88,
//ascii 0x0030
  0x1C, 0x51, 0x30, 0x18, 0x0C, 0x06, 0x83, 0xC1,
  0xA0, 0x88, 0x03,
//ascii 0x0031
  0x74, 0x49, 0x92, 0x24, 0x09,
//ascii 0x0032
  0x9E, 0x10, 0x08, 0x04, 0x02, 0x41, 0x10, 0x04,
  0x41, 0xE0, 0x0F,
//ascii 0x0033
  0x9E, 0x10, 0x10, 0x04, 0xF3, 0x80, 0x80, 0x40,
  0x20, 0xE8, 0x03,
//ascii 0x0034
  0x40, 0xC0, 0x40, 0x41, 0x82, 0x84, 0x88, 0x10,
  0x21, 0xFF, 0x81, 0x00, 0x01, 0x02,
//ascii 0x0035
  0x3E, 0x81, 0x40, 0x10, 0xF8, 0x80, 0x81, 0x40,
  0x60, 0xC8, 0x03,
//ascii 0x0036
  0x38, 0x83, 0x20, 0x10, 0xE8, 0x0D, 0x83, 0xC1,
  0xA0, 0x90, 0x07,
//ascii 0x0037
  0x7F, 0x20, 0x08, 0x04, 0x82, 0x40, 0x10, 0x08,
  0x04, 0x81,
//ascii 0x0038
  0x1C, 0x51, 0x30, 0x28, 0xE2, 0x88, 0x82, 0xC1,
  0x60, 0xD0, 0x07,
//ascii 0x0039
  0x9E, 0x50, 0x30, 0x18, 0x0C, 0x7B, 0x81, 0x40,
  0x10, 0xCC, 0x01,
//ascii 0x003A
  0x0F, 0xC0, 0x03,
//ascii 0x003B
  0x0F, 0x40, 0x05,
//ascii 0x003C
  0x40, 0x18, 0x63, 0xC0, 0x80, 0x01, 0x01,
//ascii 0x003D
  0x7F, 0x00, 0xE0, 0x0F,
//ascii 0x003E
  0x01, 0x03, 0x06, 0x8C, 0x31, 0x04,
//ascii 0x003F
  0x0F, 0x42, 0x08, 0x11, 0x11, 0x02, 0x08, 0x01,
//ascii 0x0040
  0xF0, 0xC1, 0x20, 0x02, 0x24, 0x9E, 0x11, 0x99,
  0x90, 0x09, 0x99, 0x90, 0x89, 0x19, 0x77, 0x01,
  0x20, 0x00, 0x04, 0x80, 0x0F,
//ascii 0x0041
  0x30, 0xC0, 0x00, 0x03, 0x12, 0x48, 0x20, 0x41,
  0x08, 0x3F, 0x02, 0x09, 0x24, 0x50, 0x80,
//ascii 0x0042
  0x9F, 0x50, 0x30, 0x18, 0xFA, 0x84, 0x82, 0xC1,
  0x60, 0xE8, 0x03,
//ascii 0x0043
  0xF8, 0x04, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x02, 0x04, 0xF8,
//ascii 0x0044
  0x1F, 0x21, 0x41, 0x81, 0x81, 0x81, 0x81, 0x81,
  0x81, 0x41, 0x21, 0x1F,
//ascii 0x0045
  0x7F, 0x10, 0x04, 0xC1, 0x1F, 0x04, 0x41, 0x10,
  0xFC,
//ascii 0x0046
  0x7F, 0x10, 0x04, 0x41, 0xF0, 0x07, 0x41, 0x10,
  0x04,
//ascii 0x0047
  0xF8, 0x11, 0x20, 0x40, 0x00, 0x01, 0x04, 0x10,
  0x7E, 0x80, 0x01, 0x0A, 0x48, 0x20, 0x7E,
//ascii 0x0048
  0x81, 0x81, 0x81, 0x81, 0x81, 0xFF, 0x81, 0x81,
  0x81, 0x81, 0x81, 0x81,
//ascii 0x0049
  0xFF, 0x0F,
//ascii 0x004A
  0x24, 0x49, 0x92, 0x24, 0x49, 0x0E,
//ascii 0x004B
  0xC1, 0x50, 0x24, 0x51, 0x18, 0x14, 0x12, 0x91,
  0x48, 0x28, 0x08,
//ascii 0x004C
  0x41, 0x10, 0x04, 0x41, 0x10, 0x04, 0x41, 0x10,
  0xFC,
//ascii 0x004D
  0x01, 0x06, 0x3C, 0xF0, 0xC0, 0x85, 0x16, 0x5A,
  0x68, 0x92, 0x49, 0xC6, 0x18, 0x63, 0x80,
//ascii 0x004E
  0x81, 0x83, 0x83, 0x85, 0x85, 0x89, 0x91, 0x91,
  0xA1, 0xC1, 0xC1, 0x81,
//ascii 0x004F
  0x78, 0x10, 0x22, 0x50, 0x80, 0x01, 0x06, 0x18,
  0x60, 0x80, 0x01, 0x0A, 0x44, 0x08, 0x1E,
//ascii 0x0050
  0x5F, 0x18, 0x86, 0x61, 0xF8, 0x05, 0x41, 0x10,
  0x04,
//ascii 0x0051
  0x78, 0x10, 0x22, 0x50, 0x80, 0x01, 0x06, 0x18,
  0x60, 0x80, 0x01, 0x0A, 0x44, 0x08, 0x1E, 0x40,
  0x00, 0x02, 0x18,
//ascii 0x0052
  0x9F, 0x50, 0x30, 0x18, 0x0C, 0x7D, 0x22, 0x91,
  0x50, 0x30, 0x08,
//ascii 0x0053
  0xBE, 0x60, 0x20, 0x10, 0x70, 0xC0, 0x80, 0x40,
  0x20, 0xF0, 0x07,
//ascii 0x0054
  0x7F, 0x04, 0x02, 0x81, 0x40, 0x20, 0x10, 0x08,
  0x04, 0x02, 0x01,
//ascii 0x0055
  0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81,
  0x81, 0x81, 0x42, 0x3C,
//ascii 0x0056
  0x01, 0x03, 0x0A, 0x12, 0x24, 0x88, 0x08, 0x11,
  0x22, 0x28, 0x50, 0x40, 0x80,
//ascii 0x0057
  0xC1, 0xA0, 0x30, 0x24, 0x0C, 0x89, 0x44, 0x22,
  0x11, 0x49, 0x42, 0x92, 0x50, 0x28, 0x14, 0x0A,
  0x86, 0x81, 0x61, 0x20, 0x10,
//ascii 0x0058
  0x82, 0x04, 0x11, 0x41, 0x82, 0x02, 0x02, 0x0A,
  0x14, 0x44, 0x88, 0x08, 0x0A, 0x08,
//ascii 0x0059
  0x81, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x10,
  0x10, 0x10, 0x10, 0x10,
//ascii 0x005A
  0x7F, 0x20, 0x08, 0x04, 0x41, 0x20, 0x08, 0x02,
  0x41, 0xE0, 0x0F,
//ascii 0x005B
  0x1F, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0F,
//ascii 0x005C
  0x41, 0x08, 0x41, 0x08, 0x21, 0x08, 0x21, 0x08,
//ascii 0x005D
  0x8F, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x0F,
//ascii 0x005E
  0x08, 0x0A, 0x45, 0x24, 0x0A, 0x06, 0x01,
//ascii 0x005F
  0x7F,
//ascii 0x0060
  0x11, 0x01,
//ascii 0x0061
  0x1E, 0x08, 0x82, 0x7E, 0x18, 0xC6, 0x2E,
//ascii 0x0062
  0x01, 0x01, 0x01, 0x01, 0x3D, 0x43, 0x81, 0x81,
  0x81, 0x81, 0x81, 0x43, 0x3D,
//ascii 0x0063
  0xBC, 0x10, 0x04, 0x41, 0x10, 0x08, 0x3C,
//ascii 0x0064
  0x80, 0x80, 0x80, 0x80, 0xBC, 0xC2, 0x81, 0x81,
  0x81, 0x81, 0x81, 0xC2, 0xBC,
//ascii 0x0065
  0x1C, 0x51, 0x30, 0xF8, 0x0F, 0x04, 0x84, 0x3C,
//ascii 0x0066
  0x38, 0x41, 0x10, 0x1F, 0x41, 0x10, 0x04, 0x41,
  0x10, 0x04,
//ascii 0x0067
  0xFC, 0x22, 0x42, 0x42, 0x22, 0x3C, 0x04, 0x02,
  0x7C, 0x42, 0x81, 0x43, 0x3E,
//ascii 0x0068
  0x81, 0x40, 0x20, 0xD0, 0x19, 0x05, 0x83, 0xC1,
  0x60, 0x30, 0x18, 0x04,
//ascii 0x0069
  0xF9, 0x07,
//ascii 0x006A
  0x04, 0x48, 0x92, 0x24, 0x49, 0x1E,
//ascii 0x006B
  0x81, 0x40, 0x20, 0x10, 0x8A, 0x24, 0x0A, 0x85,
  0x45, 0x24, 0x14, 0x04,
//ascii 0x006C
  0xFF, 0x1F,
//ascii 0x006D
  0x9D, 0x33, 0x46, 0x41, 0x18, 0x84, 0x41, 0x18,
  0x84, 0x41, 0x18, 0x84, 0x41, 0x08,
//ascii 0x006E
  0x9D, 0x51, 0x30, 0x18, 0x0C, 0x06, 0x83, 0x41,
//ascii 0x006F
  0x1C, 0x51, 0x30, 0x18, 0x0C, 0x06, 0x45, 0x1C,
//ascii 0x0070
  0x3D, 0x43, 0x81, 0x81, 0x81, 0x81, 0x81, 0x43,
  0x3D, 0x01, 0x01, 0x01, 0x01,
//ascii 0x0071
  0xBC, 0xC2, 0x81, 0x81, 0x81, 0x81, 0x81, 0xC2,
  0xBC, 0x80, 0x80, 0x80, 0x80,
//ascii 0x0072
  0x7D, 0x84, 0x10, 0x42, 0x08, 0x01,
//ascii 0x0073
  0x3E, 0x84, 0xC1, 0x20, 0x84, 0x0F,
//ascii 0x0074
  0xE2, 0x09, 0x21, 0x84, 0x10, 0x82, 0x03,
//ascii 0x0075
  0xC1, 0x60, 0x30, 0x18, 0x0C, 0x06, 0xC5, 0x5E,
//ascii 0x0076
  0xC1, 0xA0, 0x48, 0x24, 0xA2, 0x50, 0x28, 0x08,
//ascii 0x0077
  0x61, 0x28, 0x46, 0x62, 0x24, 0x49, 0x92, 0x44,
  0x29, 0x0C, 0x83, 0x10, 0x08, 0x01,
//ascii 0x0078
  0x61, 0x28, 0x31, 0x0C, 0x23, 0x85, 0x21,
//ascii 0x0079
  0xC1, 0xA0, 0x48, 0x24, 0xA2, 0x50, 0x28, 0x08,
  0x04, 0x81, 0x30,
//ascii 0x007A
  0x1F, 0x22, 0x44, 0x84, 0x08, 0x1F,
//ascii 0x007B
  0x98, 0x10, 0x42, 0x08, 0x19, 0x84, 0x10, 0x42,
  0x08, 0x06,
//ascii 0x007C
  0xFF, 0xFF, 0x01,
//ascii 0x007D
  0x43, 0x10, 0x42, 0x08, 0xC1, 0x84, 0x10, 0x42,
  0xC4,
//ascii 0x007E
  0x07, 0x3C,
};

const bagl_font_character_t charactersOPEN_SANS_LIGHT_16PX[95] = {
  { 0,     0,  4,0, 0, 0 }, //asciii 0x0020
  { 0,     0,  3,1, 1, 1 }, //asciii 0x0021
  { 0,     2,  6,1, 1, 1 }, //asciii 0x0022
  { 0,     4, 10,0, 1, 0 }, //asciii 0x0023
  { 0,    19,  9,1, 1, 1 }, //asciii 0x0024
  { 0,    30, 13,1, 1, 1 }, //asciii 0x0025
  { 0,    47, 11,1, 1, 1 }, //asciii 0x0026
  { 0,    61,  3,1, 1, 1 }, //asciii 0x0027
  { 0,    62,  4,1, 1, 1 }, //asciii 0x0028
  { 0,    66,  4,1, 1, 1 }, //asciii 0x0029
  { 0,    70,  9,1, 0, 1 }, //asciii 0x002A
  { 0,    76,  9,1, 2, 1 }, //asciii 0x002B
  { 0,    82,  3,0, 11, 1 }, //asciii 0x002C
  { 0,    83,  5,1, 8, 1 }, //asciii 0x002D
  { 0,    84,  4,1, 11, 1 }, //asciii 0x002E
  { 0,    85,  6,0, 1, 1 }, //asciii 0x002F
  { 0,    92,  9,1, 1, 1 }, //asciii 0x0030
  { 0,   103,  9,2, 1, 4 }, //asciii 0x0031
  { 0,   108,  9,1, 1, 1 }, //asciii 0x0032
  { 0,   119,  9,1, 1, 1 }, //asciii 0x0033
  { 0,   130,  9,0, 1, 0 }, //asciii 0x0034
  { 0,   144,  9,1, 1, 1 }, //asciii 0x0035
  { 0,   155,  9,1, 1, 1 }, //asciii 0x0036
  { 0,   166,  9,1, 1, 1 }, //asciii 0x0037
  { 0,   176,  9,1, 1, 1 }, //asciii 0x0038
  { 0,   187,  9,1, 1, 1 }, //asciii 0x0039
  { 0,   198,  4,1, 4, 1 }, //asciii 0x003A
  { 0,   201,  4,1, 4, 1 }, //asciii 0x003B
  { 0,   204,  9,1, 3, 1 }, //asciii 0x003C
  { 0,   211,  9,1, 5, 1 }, //asciii 0x003D
  { 0,   215,  9,1, 3, 1 }, //asciii 0x003E
  { 0,   221,  7,1, 1, 1 }, //asciii 0x003F
  { 0,   229, 14,1, 1, 1 }, //asciii 0x0040
  { 0,   250, 10,0, 1, 0 }, //asciii 0x0041
  { 0,   265, 10,2, 1, 1 }, //asciii 0x0042
  { 0,   276, 10,1, 1, 1 }, //asciii 0x0043
  { 0,   288, 11,2, 1, 1 }, //asciii 0x0044
  { 0,   300,  9,2, 1, 1 }, //asciii 0x0045
  { 0,   309,  8,2, 1, 0 }, //asciii 0x0046
  { 0,   318, 12,1, 1, 1 }, //asciii 0x0047
  { 0,   333, 12,2, 1, 2 }, //asciii 0x0048
  { 0,   345,  4,2, 1, 1 }, //asciii 0x0049
  { 0,   347,  6,0, 1, 3 }, //asciii 0x004A
  { 0,   353,  9,2, 1, 0 }, //asciii 0x004B
  { 0,   364,  8,2, 1, 0 }, //asciii 0x004C
  { 0,   373, 14,2, 1, 2 }, //asciii 0x004D
  { 0,   388, 12,2, 1, 2 }, //asciii 0x004E
  { 0,   400, 12,1, 1, 1 }, //asciii 0x004F
  { 0,   415,  9,2, 1, 1 }, //asciii 0x0050
  { 0,   424, 12,1, 1, 1 }, //asciii 0x0051
  { 0,   443, 10,2, 1, 1 }, //asciii 0x0052
  { 0,   454,  9,1, 1, 1 }, //asciii 0x0053
  { 0,   465,  7,0, 1, 0 }, //asciii 0x0054
  { 0,   476, 12,2, 1, 2 }, //asciii 0x0055
  { 0,   488, 10,0, 1, 1 }, //asciii 0x0056
  { 0,   501, 14,0, 1, 0 }, //asciii 0x0057
  { 0,   522,  9,0, 1, 0 }, //asciii 0x0058
  { 0,   536,  9,0, 1, 1 }, //asciii 0x0059
  { 0,   548,  9,1, 1, 1 }, //asciii 0x005A
  { 0,   559,  5,1, 1, 0 }, //asciii 0x005B
  { 0,   567,  6,0, 1, 1 }, //asciii 0x005C
  { 0,   575,  5,0, 1, 1 }, //asciii 0x005D
  { 0,   583,  9,1, 1, 1 }, //asciii 0x005E
  { 0,   590,  8,0, 14, 1 }, //asciii 0x005F
  { 0,   591,  9,3, 0, 3 }, //asciii 0x0060
  { 0,   593,  8,1, 4, 1 }, //asciii 0x0061
  { 0,   600, 10,1, 0, 1 }, //asciii 0x0062
  { 0,   613,  8,1, 4, 1 }, //asciii 0x0063
  { 0,   620, 10,1, 0, 1 }, //asciii 0x0064
  { 0,   633,  9,1, 4, 1 }, //asciii 0x0065
  { 0,   641,  6,0, 0, 0 }, //asciii 0x0066
  { 0,   651,  8,0, 4, 0 }, //asciii 0x0067
  { 0,   664,  9,1, 0, 1 }, //asciii 0x0068
  { 0,   676,  4,1, 2, 2 }, //asciii 0x0069
  { 0,   678,  5,0, 2, 2 }, //asciii 0x006A
  { 0,   684,  8,1, 0, 0 }, //asciii 0x006B
  { 0,   696,  4,1, 0, 2 }, //asciii 0x006C
  { 0,   698, 14,1, 4, 1 }, //asciii 0x006D
  { 0,   712,  9,1, 4, 1 }, //asciii 0x006E
  { 0,   720,  9,1, 4, 1 }, //asciii 0x006F
  { 0,   728, 10,1, 4, 1 }, //asciii 0x0070
  { 0,   741, 10,1, 4, 1 }, //asciii 0x0071
  { 0,   754,  6,1, 4, 0 }, //asciii 0x0072
  { 0,   760,  7,1, 4, 1 }, //asciii 0x0073
  { 0,   766,  5,0, 3, 0 }, //asciii 0x0074
  { 0,   773,  9,1, 4, 1 }, //asciii 0x0075
  { 0,   781,  8,0, 4, 1 }, //asciii 0x0076
  { 0,   789, 12,0, 4, 0 }, //asciii 0x0077
  { 0,   803,  8,1, 4, 1 }, //asciii 0x0078
  { 0,   810,  8,0, 4, 1 }, //asciii 0x0079
  { 0,   821,  7,1, 4, 1 }, //asciii 0x007A
  { 0,   827,  6,0, 1, 1 }, //asciii 0x007B
  { 0,   837,  6,1, 0, 4 }, //asciii 0x007C
  { 0,   840,  6,1, 1, 0 }, //asciii 0x007D
  { 0,   849,  9,1, 6, 1 }, //asciii 0x007E
};

const bagl_font_t fontOPEN_SANS_LIGHT_16PX = {
  851, // bitmap len
  BAGL_FONT_OPEN_SANS_LIGHT_16px, // font id
  1, // bpp => 1 for B&W
  17, // height (does already contain the nb of skipped lines)
  13, // baseline (does already contain the nb of skipped lines)
  0x20, // first character
  0x7E, // last character
  charactersOPEN_SANS_LIGHT_16PX,
  bitmapOPEN_SANS_LIGHT_16PX
};
