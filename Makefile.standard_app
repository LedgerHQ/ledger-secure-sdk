#*******************************************************************************
#   Ledger SDK
#   (c) 2022 Ledger
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#*******************************************************************************

#####################################################################
#                            BLUETOOTH                              #
#####################################################################
ifeq ($(ENABLE_BLUETOOTH), 1)
ifeq ($(TARGET_NAME),$(filter $(TARGET_NAME),TARGET_NANOX TARGET_STAX))
    STANDARD_APP_FLAGS = 0x200  # APPLICATION_FLAG_BOLOS_SETTINGS
    DEFINES += HAVE_BLE BLE_COMMAND_TIMEOUT_MS=2000 HAVE_BLE_APDU
    DEFINES += BLE_SEGMENT_SIZE=32
    SDK_SOURCE_PATH += lib_blewbxx lib_blewbxx_impl
endif
endif

#####################################################################
#                               DEBUG                               #
#####################################################################
ifneq ($(DEBUG), 0)
    DEFINES += HAVE_PRINTF
    ifeq ($(TARGET_NAME),TARGET_NANOS)
        DEFINES += PRINTF=screen_printf
    else
        DEFINES += PRINTF=mcu_usb_printf
    endif
else
        DEFINES += PRINTF\(...\)=
endif

#####################################################################
#                        IO SEPROXY BUFFER SIZE                     #
#####################################################################
ifneq ($(DISABLE_DEFAULT_IO_SEPROXY_BUFFER_SIZE), 1)
    ifeq ($(TARGET_NAME), TARGET_NANOS)
        DEFINES += IO_SEPROXYHAL_BUFFER_SIZE_B=128
    else
        DEFINES += IO_SEPROXYHAL_BUFFER_SIZE_B=300
    endif
endif

#####################################################################
#                          STANDARD DEFINES                         #
#####################################################################
DEFINES += $(DEFINES_LIB)
DEFINES += APPNAME=\"$(APPNAME)\"
DEFINES += APPVERSION=\"$(APPVERSION)\"
DEFINES += MAJOR_VERSION=$(APPVERSION_M) MINOR_VERSION=$(APPVERSION_N) PATCH_VERSION=$(APPVERSION_P)
DEFINES += OS_IO_SEPROXYHAL

ifeq ($(DISABLE_STANDARD_APP_DEFINES), 1)
    DISABLE_STANDARD_SNPRINTF = 1
    DISABLE_STANDARD_USB = 1
    DISABLE_STANDARD_WEBUSB = 1
    DISABLE_STANDARD_BAGL_UX_FLOW = 1
endif

ifneq ($(DISABLE_STANDARD_SNPRINTF), 1)
    DEFINES += HAVE_SPRINTF HAVE_SNPRINTF_FORMAT_U
endif

ifneq ($(DISABLE_STANDARD_USB), 1)
    DEFINES += HAVE_IO_USB HAVE_L4_USBLIB IO_USB_MAX_ENDPOINTS=6 IO_HID_EP_LENGTH=64 HAVE_USB_APDU
    DEFINES += USB_SEGMENT_SIZE=64
    SDK_SOURCE_PATH += lib_stusb lib_stusb_impl
endif

ifneq ($(DISABLE_STANDARD_WEBUSB), 1)
    DEFINES += HAVE_WEBUSB WEBUSB_URL_SIZE_B=0 WEBUSB_URL=""
endif

ifneq ($(DISABLE_STANDARD_BAGL_UX_FLOW), 1)
ifneq ($(TARGET_NAME), TARGET_STAX)
    DEFINES += HAVE_UX_FLOW
endif
endif

ifneq ($(DISABLE_STANDARD_APP_FILES), 1)
SDK_SOURCE_PATH += lib_standard_app
endif

#####################################################################
#                              NBGL                                 #
#####################################################################
ifeq ($(ENABLE_NBGL_QRCODE), 1)
ifeq ($(TARGET_NAME), TARGET_STAX)
    DEFINES += NBGL_QRCODE
endif
endif

ifeq ($(ENABLE_NBGL_KEYBOARD), 1)
ifeq ($(TARGET_NAME), TARGET_STAX)
    DEFINES += NBGL_KEYBOARD
endif
endif

ifeq ($(ENABLE_NBGL_KEYPAD), 1)
ifeq ($(TARGET_NAME), TARGET_STAX)
    DEFINES += NBGL_KEYPAD
endif
endif

#####################################################################
#                           APP_FLAGS                               #
#####################################################################
CUSTOM_APP_FLAGS ?= 0x000 # Can be personalized by the application
STANDARD_APP_FLAGS ?= 0x000

APP_FLAGS = $(shell echo $$(( $(STANDARD_APP_FLAGS) + $(CUSTOM_APP_FLAGS) )) )

APP_LOAD_PARAMS += --appFlags $(APP_FLAGS)

APP_LOAD_PARAMS += $(COMMON_LOAD_PARAMS)

CC      := $(CLANGPATH)clang
AS      := $(GCCPATH)arm-none-eabi-gcc
LD      := $(GCCPATH)arm-none-eabi-gcc
LDLIBS  += -lm -lgcc -lc

include $(BOLOS_SDK)/Makefile.glyphs

load: all
	python3 -m ledgerblue.loadApp $(APP_LOAD_PARAMS)

load-offline: all
	python3 -m ledgerblue.loadApp $(APP_LOAD_PARAMS) --offline

delete:
	python3 -m ledgerblue.deleteApp $(COMMON_DELETE_PARAMS)

include $(BOLOS_SDK)/Makefile.rules

# Prepare `listvariants` mandatory target.
# This target output must contains:
# - `VARIANTS` which is used as a marker for the tools parsing the output.
# - <VARIANT_PARAM> which is the name of the parameter which should be set
#   to specify the variant that should be build.
# - <VARIANT_VALUES> a list of variant that can be build using this app code.
#   * It must at least contains one value.
#   * Values can be the app ticker or anything else but should be unique.
#
# Deployment scripts will use this Makefile target to retrieve the list of
# available variants and then call `make -j <VARIANT_PARAM>=<VALUE>` for each
# <VALUE> in <VARIANT_VALUES>.
listvariants:
	@echo VARIANTS $(VARIANT_PARAM) $(VARIANT_VALUES)
